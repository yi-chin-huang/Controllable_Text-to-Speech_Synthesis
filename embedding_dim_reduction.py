# -*- coding: utf-8 -*-
"""embedding_dim_reduction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NmhDRdG_F8sJJ-OyUd8dJlC3M2rllPHe
"""

import pickle
import os
import numpy as np

import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from umap import UMAP

import matplotlib.colors as mcolors
from collections import Counter

# folder_path = '/content/drive/My Drive/CS224S/project/'
folder_path = '/home/embeddings/'

def load_data(folder_path):
    X = []
    labels = []
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        if file_path.endswith('.pk'):
            with open(file_path, 'rb') as file:
                data = pickle.load(file)
                X.append(data['embed'])
                data.pop('embed', None)
                labels.append(data)
    return np.array(X), np.array(labels)

# Load the data
Xf, labelsf = load_data(folder_path + 'female')
Xm, labelsm = load_data(folder_path + 'male')

# X = np.concatenate((Xf, labelsf), axis=0)
# labels = np.concatenate((Xm, labelsm), axis=0)

def average_embeddings_by_id(X, labels):
    embeddings_sum = {}
    embeddings_count = {}
    label_dict = {}

    # Iterate over each embedding and its associated label dictionary
    for embedding, label in zip(X, labels):
        id_val = label['id']
        if id_val in embeddings_sum:
            embeddings_sum[id_val] += embedding
            embeddings_count[id_val] += 1
        else:
            embeddings_sum[id_val] = embedding
            embeddings_count[id_val] = 1
            label_dict[id_val] = label  # Store the first occurrence of label data for each ID

    # Calculate the average embeddings for each ID
    averaged_embeddings = {id_val: embeddings_sum[id_val] / embeddings_count[id_val] for id_val in embeddings_sum}

    # Convert dictionaries to the format expected for return
    unique_ids = list(averaged_embeddings.keys())
    X_avg = np.array([averaged_embeddings[id_val] for id_val in unique_ids])
    labels_avg = np.array([label_dict[id_val] for id_val in unique_ids])

    return X_avg, labels_avg

def save_data_as_pickle(data, filename):
    with open(filename, 'wb') as f:
        pickle.dump(data, f)

# Load the data
Xf_avg, labelsf_avg = average_embeddings_by_id(Xf, labelsf)
Xm_avg, labelsm_avg = average_embeddings_by_id(Xm, labelsm)

embeddings_path = "/home/Yi-Chin/Controllable_Text-to-Speech_Synthesis/embeddings/"
save_data_as_pickle((Xf_avg, labelsf_avg), embeddings_path + 'female_avg_embeddings.pickle')
save_data_as_pickle((Xm_avg, labelsm_avg), embeddings_path + 'male_avg_embeddings.pickle')

X_avg = np.concatenate((Xf_avg, Xm_avg), axis=0)
labels_avg = np.concatenate((labelsf_avg, labelsm_avg), axis=0)

def apply_dimension_reduction(X, method='pca'):
    if method == 'pca':
        model = PCA(n_components=2)
    elif method == 'tsne':
        perplexity_value = min(30, max(5, X.shape[0] // 5)) # perplexity approximates the number of close neighbors each point has.
        model = TSNE(n_components=2, perplexity=perplexity_value, random_state=42)
    elif method == 'umap':
        model = UMAP(n_components=2, random_state=42)
    else:
        raise ValueError("Unsupported dimension reduction method")
    return model.fit_transform(X)

def plot_gender(X, labels, title, save_path=None):
    y = np.array([lab['gender'] for lab in labels])
    colors = {'m': 'blue', 'f': 'red'}
    plt.figure(figsize=(12, 10))
    for gender in np.unique(y):
        condition = y == gender
        indices = np.nonzero(condition)[0]
        plt.scatter(X[indices, 0], X[indices, 1], c=colors[gender], label=gender)
    plt.title(title, fontsize=16)
    plt.xlabel('Component 1', fontsize=14)
    plt.ylabel('Component 2', fontsize=14)
    plt.legend()
    plt.show()

    if save_path:
        plt.savefig(save_path, format='png', dpi=300)  # Save the plot as a PNG file with high resolution
        plt.close()  # Close the plot explicitly after saving to free up memory
    else:
        plt.show()

# plots_path = "/content/drive/My Drive/CS224S/project/plots/"
plots_path = "/home/Yi-Chin/Controllable_Text-to-Speech_Synthesis/plots/"

X_pca = apply_dimension_reduction(X_avg, 'pca')
X_tsne = apply_dimension_reduction(X_avg, 'tsne')
X_umap = apply_dimension_reduction(X_avg, 'umap')

# Plot the results
plot_gender(X_pca, labels_avg, 'Gender PCA Projection', plots_path + "gender_pca.png")
plot_gender(X_tsne, labels_avg, 'Gender t-SNE Projection', plots_path + "gender_tsne.png")
plot_gender(X_umap, labels_avg, 'Gender UMAP Projection', plots_path + "gender_umap.png")
def plot_nation(X, labels, title, save_path=None):
    nations_list = [lab['nationality'] for lab in labels]
    nation_counts = Counter(nations_list)
    top_nations = nation_counts.most_common(6)
    unique_nationalities = [nation for nation, _ in top_nations]
    y = np.array(nations_list)

    hues = np.linspace(0, 1, len(unique_nationalities), endpoint=False)
    colors = {nation: mcolors.hsv_to_rgb([hue, 1, 1]) for nation, hue in zip(unique_nationalities, hues)}
    
    plt.figure(figsize=(12, 10)) 
    for nationality in unique_nationalities:
        indices = np.where(y == nationality)
        plt.scatter(X[indices, 0], X[indices, 1], color=colors[nationality], label=nationality)

    plt.title(title, fontsize=16) 
    plt.xlabel('Component 1', fontsize=14)  
    plt.ylabel('Component 2', fontsize=14)  
    plt.xticks(fontsize=12)  
    plt.yticks(fontsize=12) 
    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), fontsize=12) 
    plt.tight_layout() 

    if save_path:
        plt.savefig(save_path, format='png', dpi=300)  
        plt.close() 
    else:
        plt.show()

# Apply PCA, t-SNE, and UMAP for each gender

# female
Xf_pca = apply_dimension_reduction(Xf_avg, 'pca')
Xf_tsne = apply_dimension_reduction(Xf_avg, 'tsne')
Xf_umap = apply_dimension_reduction(Xf_avg, 'umap')

# male
Xm_pca = apply_dimension_reduction(Xm_avg, 'pca')
Xm_tsne = apply_dimension_reduction(Xm_avg, 'tsne')
Xm_umap = apply_dimension_reduction(Xm_avg, 'umap')


# Plot the results
plot_nation(Xf_pca, labelsf_avg, 'Nationality PCA Projection (Female)', plots_path + "female_nation_pca.png")
plot_nation(Xf_tsne, labelsf_avg, 'Nationality t-SNE Projection (Female)', plots_path + "female_nation_tsne.png")
plot_nation(Xf_umap, labelsf_avg, 'Nationality UMAP Projection (Female)', plots_path + "female_nation_umap.png")

plot_nation(Xm_pca, labelsm_avg, 'Nationality PCA Projection (Male)', plots_path + "male_nation_pca.png")
plot_nation(Xm_tsne, labelsm_avg, 'Nationality t-SNE Projection (Male)', plots_path + "male_nation_tsne.png")
plot_nation(Xm_umap, labelsm_avg, 'Nationality UMAP Projection (Male)', plots_path + "male_nation_umap.png")

